"""FastAPI main entrypoint file."""

from pydantic import BaseModel, Field
from fastapi import FastAPI, HTTPException, status, Query, Body, Depends
from fastapi.responses import RedirectResponse
from typing import Annotated, Union
from datetime import datetime
from models import Resource, Type
from services import ResourceServices, ResourceAlreadyExistsError, ResourceNotFoundError
from fastapi.middleware.cors import CORSMiddleware
import sqlite3

app = FastAPI(
    title="EX01 API Design",
    contact={
        "name": "Daniel Zhang",
        "url": "https://github.com/D123aniel/Link-Shortner-Paste-bin",
    },
    description="""
## Introduction

This API allows you to store text snippets with a unique URL and it allows you to submit a long URL in order to receive a shorter, redirectable URL.

Auth
""",
    openapi_tags=[
        {
            "name": "Sue",
            "User looking to share text and URLs with other people.": "Sue Sharer's API Endpoints",
        },
        {
            "name": "Cai",
            "User clicking on the link and seeing the information generated by Sue.": "Cai Clicker's API Endpoints",
        },
        {
            "name": "Amy",
            "Administrator controlling and overseeing resources": "Amy Admin's API Endpoints",
        },
    ],
)
# Add CORS middleware to allow requests from any origin
origins = ["*"]
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Allows all origins
    allow_methods=["*"],  # Allows all methods
    allow_headers=["*"],  # Allows all headers
)


# Sue Share
# Post for text sharer
@app.post(
    "/create-text",
    summary="Posting a Text Snippet",
    description="This endpoint will receive a text snippet, generate a random link for the text-snippet, and return the link.",
    status_code=status.HTTP_201_CREATED,
    responses={  # set to 200
        201: {"description": "Resource created successfully."},
        400: {"description": "Improperly formatted request."},
    },
    tags=["Sue"],
)
def create_resource_text(
    resource: Annotated[
        Resource,
        Body(
            description="The text snippet to be shared",
            openapi_examples={
                "User submitted no vanity": {
                    "description": "Text-snippet without a vanity URL or expiration time, before link has been generated",
                    "value": {
                        "id": "",
                        "content": "Hello World!",
                        "vanity_url": "",
                        "type": "text",
                        "expiration_time": -1,
                    },
                },
                "User submitted no vanity, link generated": {
                    "description": "Text-snippet without a vanity URL or expiration time, when link has been generated.",
                    "value": {
                        "id": "x19Kq%p",
                        "content": "Hello World!",
                        "vanity_url": "",
                        "type": "text",
                        "expiration_time": -1,
                    },
                },
                "User submitted vanity": {
                    "description": "Text-snippet with a vanity URL and expiration, before link has been generated.",
                    "value": {
                        "id": "",
                        "content": "Hello World!",
                        "vanity_url": "hello-world",
                        "type": "text",
                        "expiration_time": datetime.now(),
                    },
                },
                "User submitted vanity, link generated": {
                    "description": "Text-snippet with a vanity URL and expiration, when link has been generated.",
                    "value": {
                        "id": "hello-world",
                        "content": "Hello World!",
                        "vanity_url": "hello-world",
                        "type": "text",
                        "expiration_time": 24,
                    },
                },
            },
        ),
    ],
    resource_service: ResourceServices = Depends(),
) -> Resource:
    try:
        return resource_service.create_resource_text(resource)
    except ResourceAlreadyExistsError:
        raise HTTPException(status_code=400, detail="Resource already exists")


# Post for link shortner
@app.post(
    "/shorten-url",
    summary="Posting a Link",
    description="This endpoint will receive a full URL, shorten the URL, and return the shortened URL.",
    status_code=status.HTTP_201_CREATED,
    tags=["Sue"],
)
def create_resource_link(
    resource: Annotated[
        Resource,
        Body(
            description="The link to be shortened",
            openapi_examples={
                "Pre-shortened": {
                    "description": "Link before being shortened",
                    "value": {
                        "id": "",
                        "content": "https://fastapi.tiangolo.com/reference/parameters/?h=path%28#fastapi.Query",
                        "vanity_url": "link-short",
                        "type": "link",
                        "expiration_time": None,
                    },
                },
                "Post-shortened": {
                    "description": "Link after being shortened",
                    "value": {
                        "id": "link-short",
                        "content": "https://fastapi.tiangolo.com/reference/parameters/?h=path%28#fastapi.Query",
                        "vanity_url": "link-short",
                        "type": "link",
                        "expiration_time": None,
                    },
                },
            },
        ),
    ],
    resource_service: ResourceServices = Depends(),
):
    try:
        return resource_service.create_resource_url(resource)
    except ResourceAlreadyExistsError:
        raise HTTPException(status_code=400, detail="Resource already exists")


# Cai Clicker


# Get for text snippet and link (same one)
@app.get(
    "/{resource_id}",
    summary="Identifies and return resource content.",
    description="This endpoint will identify which resource this resource identifier points to (link or text), then returns the resource content.",
    responses={
        307: {"description": "Resource is a link, redirecting to target."},
        404: {"description": "Resource not found"},
    },
    tags=["Cai"],
)
def get_resource(resource_id: str, resource_service: ResourceServices = Depends()):
    try:
        return resource_service.get_resource(resource_id)
    except ResourceNotFoundError:
        raise HTTPException(status_code=404, detail="Resource not found")


# Amy Admin


# Get for all active resources
@app.get(
    "/admin/resources",
    tags=["Amy"],
    summary="Get all active resources",
    description="This endpoint will return all active resources, both shortened-links and text-snippets.",
    responses={404: {"description": "Resources not found"}},
)
def get_resources(
    type: Annotated[
        Type | None,
        Query(description="Filter by type", examples=["text-snippet", "short-link"]),
    ] = None,
    sort_operator: Annotated[
        str | None, Query(description="Sort operator", examples=["<=", ">="])
    ] = None,
    sort_value: Annotated[
        int | None,
        Query(description="Value to sort by with sort operator", examples=[0, 1, 50]),
    ] = None,
    resource_service: ResourceServices = Depends(),
) -> list[Resource]:
    return resource_service.get_all_resources(type, sort_operator, sort_value)


# Get for how often a resource has been accessed
@app.get(
    "/admin/resources/{resource_id}",
    tags=["Amy"],
    summary="Get number of times a resource has been accessed",
    description="This endpoint will return the number of times a resource has been accessed.",
    responses={
        404: {"description": "Resource not found"},
    },
)
def get_resource_access_count(
    resource_id: str, resource_service: ResourceServices = Depends()
) -> int:
    try:
        return resource_service.get_resource_access_count(resource_id)
    except ResourceNotFoundError:
        raise HTTPException(status_code=404, detail="Resource not found")


# Patch for updating content of text snippet/changing target of link
@app.patch(
    "/admin/resources/{resource_id}",
    tags=["Amy"],
    summary="Update resource content",
    description="This endpoint will update the content of a text snipping or custom link.",
    responses={
        204: {"description": "Successful patch, no content to return."},
        400: {"description": "Patch is invalid"},
        404: {"description": "Resource not found"},
    },
)
def update_resource(
    resource_id: str,
    new_content: Annotated[
        str,
        Body(
            description="The new content for the resource",
            openapi_examples={
                "Updating text": {
                    "description": "Updating text content",
                    "value": "Hello World!",
                },
                "Updating link": {
                    "description": "Updating link target",
                    "value": "https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#use-annotated-in-the-type-for-the-q-parameter",
                },
            },
        ),
    ],
    resource_service: ResourceServices = Depends(),
):
    try:
        return resource_service.update_resource(resource_id, new_content)
    except ResourceNotFoundError:
        raise HTTPException(status_code=404, detail="Resource not found")


# Delete for removing all resources
@app.delete(
    "/admin/resources/all",
    tags=["Amy"],
    summary="Delete all resources",
    description="This endpoint will delete all resources.",
    responses={
        204: {"description": "All resources deleted successfully."},
    },
)
def delete_all_resources(resource_service: ResourceServices = Depends()) -> bool:
    return resource_service.delete_all_resources()


# Delete for removing a resource
@app.delete(
    "/admin/resources/{resource_id}",
    tags=["Amy"],
    summary="Delete a resource",
    description="This endpoint will delete a resource.",
    responses={
        204: {"description": "Resource deleted successfully."},
        404: {"description": "Resource not found."},
    },
)
def delete_resource(
    resource_id: str, resource_service: ResourceServices = Depends()
) -> Resource:
    try:
        return resource_service.delete_resource(resource_id)
    except ResourceNotFoundError:
        raise HTTPException(status_code=404, detail="Resource not found")
